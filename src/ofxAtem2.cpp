#include "BMDSwitcherAPI_h.h"


#ifdef __cplusplus
extern "C" {
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

	typedef struct _IID
	{
		unsigned long x;
		unsigned short s1;
		unsigned short s2;
		unsigned char  c[8];
	} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
	typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

	MIDL_DEFINE_GUID(IID, LIBID_BMDSwitcherAPI, 0x8A92B919, 0x156C, 0x4D61, 0x94, 0xEF, 0x03, 0xF9, 0xBE, 0x40, 0x04, 0xB0);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioMonitorOutputCallback, 0xCB5EFB16, 0x0474, 0x4FAA, 0xB0, 0x71, 0x17, 0xFA, 0x0D, 0xAD, 0xD1, 0x9F);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioMonitorOutput, 0x21E041C3, 0x6C69, 0x4A95, 0xA6, 0xCC, 0xAE, 0x7A, 0x57, 0x25, 0x74, 0x07);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioInputCallback, 0x26E05D77, 0xEFB9, 0x4253, 0x86, 0xD8, 0x2F, 0x1E, 0x82, 0xE4, 0x62, 0xF6);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioInput, 0x321EA41E, 0x544B, 0x491B, 0xB9, 0xAA, 0xF6, 0xFC, 0xAE, 0xCE, 0xF7, 0x4F);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioMixerCallback, 0xA203DA24, 0x9910, 0x450C, 0xAA, 0x6A, 0x9A, 0xA0, 0x5C, 0x5C, 0x85, 0x6E);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioMixer, 0xBCED8CA2, 0xE915, 0x4701, 0x87, 0xD4, 0xF6, 0x80, 0x45, 0x70, 0x1E, 0x09);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTalkbackCallback, 0x5F9A1C63, 0x791C, 0x4573, 0xB2, 0x8B, 0xD9, 0xF2, 0xC0, 0x0B, 0x83, 0x68);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTalkback, 0x92220740, 0xF63B, 0x43A8, 0x8D, 0x51, 0x5B, 0x85, 0x90, 0x1B, 0x48, 0x47);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioHeadphoneOutput, 0xA2836B54, 0xB3A0, 0x4C6B, 0x8B, 0xC8, 0x16, 0xDC, 0x81, 0x21, 0x3C, 0x60);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioHeadphoneOutputCallback, 0xC97CD29E, 0x1871, 0x42EE, 0x9A, 0x51, 0xDF, 0x34, 0xB6, 0xA5, 0xAC, 0xDB);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyLumaParametersCallback, 0xAB31E347, 0x5177, 0x4595, 0x8E, 0x52, 0x65, 0x0B, 0xF9, 0xB0, 0x8B, 0x7F);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyLumaParameters, 0xEE88B575, 0x6044, 0x4372, 0xB1, 0xD6, 0x97, 0x33, 0xAF, 0x34, 0x2D, 0xCA);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyChromaParametersCallback, 0xFE3F97EC, 0x5F2D, 0x4E47, 0xAA, 0x7A, 0x38, 0x96, 0x2F, 0x9C, 0xB3, 0xCE);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyChromaParameters, 0x07658026, 0x6AE3, 0x4694, 0xB8, 0x14, 0x2A, 0xB7, 0xEB, 0xBE, 0x7D, 0x1C);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyPatternParametersCallback, 0xFBF24499, 0x06EB, 0x4C54, 0xBE, 0x92, 0x21, 0xC4, 0x03, 0xC1, 0x09, 0x3C);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyPatternParameters, 0x267EDB96, 0x5921, 0x4BA5, 0x88, 0xBA, 0xC8, 0x31, 0x23, 0xE1, 0x53, 0xD2);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyFlyKeyFrameParametersCallback, 0x136BDD85, 0x690B, 0x4691, 0xBA, 0x1D, 0xAB, 0x8A, 0x61, 0xF9, 0x7A, 0xE0);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyFlyKeyFrameParameters, 0x57F0D002, 0x53BB, 0x4787, 0x83, 0xF9, 0x18, 0x51, 0xA2, 0x57, 0xB1, 0x16);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyFlyParametersCallback, 0xA9D6543D, 0x0447, 0x4048, 0xB5, 0xAD, 0x80, 0x66, 0x22, 0xB9, 0xBF, 0x1A);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyFlyParameters, 0x36CD0B7F, 0xE52E, 0x4D94, 0xAD, 0xF5, 0xEE, 0xDC, 0xA6, 0xBC, 0xDF, 0x82);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyDVEParametersCallback, 0xE437655F, 0x32BB, 0x4652, 0xBA, 0x77, 0x40, 0x83, 0xB4, 0x35, 0x56, 0x6A);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyDVEParameters, 0x92AA5433, 0x70FB, 0x423D, 0x94, 0x35, 0x64, 0x6D, 0x17, 0x1C, 0x9D, 0x82);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyCallback, 0x1972E4DF, 0x1D5F, 0x4C4E, 0xA7, 0x9B, 0xE5, 0xA6, 0xE8, 0xCE, 0x15, 0x11);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKey, 0xA41B54B5, 0x0D52, 0x44D5, 0xAC, 0xE5, 0x9B, 0x94, 0xB0, 0xAF, 0x2A, 0x0B);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMediaPlayerCallback, 0x3A82C121, 0x18FA, 0x469E, 0xAE, 0x9A, 0x73, 0x25, 0x53, 0x56, 0xCA, 0x5B);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMediaPlayer, 0xB5240E1F, 0xCE0A, 0x4C38, 0x9F, 0xAB, 0xD7, 0xFA, 0xC2, 0x27, 0x20, 0x5A);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionMixParametersCallback, 0xFE9730BB, 0xF60B, 0x46DF, 0xB1, 0x82, 0x29, 0x92, 0xFF, 0xC8, 0x84, 0xDE);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionMixParameters, 0x4C5D18C9, 0x0955, 0x4525, 0x99, 0x47, 0x52, 0x7E, 0xA0, 0x67, 0x91, 0x40);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionDipParametersCallback, 0x410BE711, 0xDB1A, 0x48D1, 0x93, 0xE7, 0x38, 0x2A, 0x0B, 0x17, 0x81, 0xB5);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionDipParameters, 0xDACC2FF3, 0x6B54, 0x4459, 0xAA, 0xA6, 0x2B, 0x1E, 0xA2, 0xD6, 0x88, 0x7A);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionWipeParametersCallback, 0x0FC4E095, 0xDF7A, 0x4128, 0x93, 0x3A, 0xAA, 0xE4, 0xB7, 0xFD, 0x61, 0x19);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionWipeParameters, 0xFAC84D37, 0x11A2, 0x4152, 0x8E, 0x5E, 0xD9, 0xEB, 0x0D, 0xC4, 0x86, 0x19);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionDVEParametersCallback, 0x6535115F, 0xB64C, 0x4512, 0xBF, 0x5A, 0x12, 0x96, 0x92, 0x53, 0xE2, 0xF9);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionDVEParameters, 0xBAE4F4CE, 0x3731, 0x4D1F, 0x84, 0x6B, 0xF2, 0xD8, 0x1C, 0x06, 0xC3, 0xF4);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionStingerParametersCallback, 0x9A8B3FB6, 0xDD56, 0x4DFF, 0xAE, 0xB3, 0x2C, 0x8A, 0x26, 0x58, 0x53, 0x89);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionStingerParameters, 0x0F449A50, 0x4083, 0x49E8, 0xBB, 0xF5, 0xC3, 0xD9, 0x5B, 0xFA, 0x19, 0x08);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionParametersCallback, 0xDED1876A, 0x38E3, 0x418E, 0x80, 0x44, 0xF3, 0xC1, 0x26, 0xC6, 0x26, 0xE7);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionParameters, 0x83755CE5, 0x748B, 0x4E49, 0xA8, 0x56, 0xAC, 0x95, 0xB8, 0xCC, 0xD2, 0x15);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMixEffectBlockCallback, 0x96010829, 0x2029, 0x4DA3, 0xA3, 0x4B, 0x70, 0x36, 0x86, 0x05, 0xAB, 0xAA);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMixEffectBlock, 0x11974D55, 0x45E0, 0x49D8, 0xAE, 0x06, 0xEE, 0xF4, 0xD5, 0xF8, 0x1D, 0xF6);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInputCallback, 0x93054328, 0xC4C8, 0x402D, 0x88, 0x99, 0x8E, 0x1E, 0xD2, 0x8F, 0xAC, 0x22);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInput, 0x0B182DF9, 0x3732, 0x4B1C, 0x92, 0x1B, 0xC3, 0xB9, 0x14, 0xAD, 0x44, 0x1F);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInputColorCallback, 0xBAE02C95, 0x9394, 0x439C, 0xBE, 0x18, 0xCE, 0xF0, 0xC0, 0x78, 0x4E, 0xC3);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInputColor, 0xA0AF18D9, 0xCBE6, 0x49F3, 0xB5, 0x48, 0xA4, 0x4E, 0x85, 0x60, 0x54, 0xD1);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInputAuxCallback, 0x5AD1FF91, 0x143F, 0x49E9, 0x99, 0x64, 0x1B, 0x9F, 0xAF, 0x9A, 0x71, 0x2A);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInputAux, 0x52C745A8, 0x89B1, 0x449A, 0xA1, 0x49, 0xC4, 0x3F, 0x51, 0x08, 0xDA, 0xE7);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherSuperSourceBoxCallback, 0x7F667AF6, 0x9B4E, 0x4CDE, 0x9F, 0x2F, 0x2D, 0xF4, 0x50, 0x5B, 0xF8, 0x77);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherSuperSourceBox, 0x137028E5, 0x87B2, 0x407E, 0x84, 0x6F, 0x28, 0x3B, 0x18, 0xC8, 0x2C, 0xE9);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInputSuperSourceCallback, 0x6B02A84C, 0x0085, 0x4593, 0x97, 0x3A, 0x5E, 0x45, 0x80, 0x79, 0xBD, 0x16);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInputSuperSource, 0x5051EFAA, 0xDFE6, 0x4A9E, 0x9F, 0x5D, 0x93, 0x56, 0x70, 0x7F, 0x1D, 0x28);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMultiViewCallback, 0x345CE414, 0x0BF1, 0x46F9, 0x97, 0xAC, 0xFB, 0x1A, 0x47, 0x49, 0x90, 0x05);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMultiView, 0x68083082, 0x4FBF, 0x429C, 0x9F, 0xD0, 0x4A, 0x73, 0xD8, 0xB9, 0xFD, 0x93);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherDownstreamKeyCallback, 0x0C7D4DE3, 0xE7D1, 0x4062, 0x86, 0xB4, 0x9F, 0x82, 0xF7, 0xBB, 0x34, 0x6D);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherDownstreamKey, 0xE6E4F204, 0x712C, 0x4D59, 0x84, 0x8D, 0x92, 0x6B, 0x14, 0xBE, 0xF3, 0x53);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInputIterator, 0x275E9888, 0x2F65, 0x4B2E, 0x94, 0x34, 0x19, 0x37, 0xA7, 0x2B, 0x9E, 0xC4);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherSuperSourceBoxIterator, 0x96153CDA, 0xC894, 0x42EA, 0xBA, 0x90, 0xC3, 0x87, 0x01, 0x8C, 0xC3, 0x34);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMixEffectBlockIterator, 0x930BDE3B, 0x4A78, 0x43D0, 0x8F, 0xD3, 0x6E, 0x82, 0xAB, 0xA0, 0xE1, 0x17);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherDownstreamKeyIterator, 0xF2968750, 0x709B, 0x42C8, 0xB4, 0x50, 0x92, 0xCA, 0x2B, 0x06, 0x5D, 0x14);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyIterator, 0xECC57473, 0x0993, 0x444F, 0xB3, 0xCF, 0xED, 0x59, 0x3C, 0xA2, 0x5B, 0x09);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMediaPlayerIterator, 0xE910816F, 0x59CB, 0x4224, 0xA7, 0x7F, 0x06, 0xDE, 0x3D, 0x23, 0x22, 0x75);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMultiViewIterator, 0xB7A0D98B, 0xA286, 0x4651, 0xA9, 0xE7, 0x55, 0x96, 0xF6, 0x2D, 0x65, 0x2E);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioMonitorOutputIterator, 0xC76BAC6A, 0xDFEE, 0x4F2F, 0xB1, 0x61, 0x22, 0x6B, 0x48, 0x1D, 0x55, 0x6A);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioHeadphoneOutputIterator, 0x151CFF07, 0xEF32, 0x441F, 0x8F, 0xF8, 0xC2, 0x16, 0x3A, 0x75, 0x1E, 0xA2);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioInputIterator, 0x97959903, 0x651E, 0x4F68, 0xBA, 0x42, 0x1F, 0xA6, 0x15, 0x08, 0xF1, 0x89);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherSerialPortIterator, 0xE3F0E3CE, 0x5A1A, 0x4D60, 0x94, 0xA4, 0xD3, 0xDB, 0xB2, 0x51, 0x47, 0x63);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherHyperDeckIterator, 0x35879F23, 0x168D, 0x4AF2, 0x80, 0xB0, 0x6D, 0x72, 0x83, 0x8E, 0x17, 0xF9);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMixMinusOutputIterator, 0xC878F9F2, 0x116D, 0x48D4, 0x9B, 0xBF, 0xCA, 0x03, 0x44, 0x7E, 0xA9, 0xA7);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherCallback, 0xEE50FC2C, 0xD0D7, 0x42D6, 0x96, 0x5A, 0x57, 0x49, 0x8C, 0xEC, 0xC1, 0xF6);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcher, 0x3D480E2F, 0x3CF4, 0x474B, 0x92, 0xE7, 0xB7, 0x90, 0x7E, 0xE8, 0x3B, 0x41);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherDiscovery, 0x2CEFAB87, 0x89E6, 0x442F, 0xA4, 0xF6, 0x8F, 0xE6, 0x3A, 0x50, 0xE1, 0x7E);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherFrame, 0x35A1F6A6, 0xD317, 0x4F89, 0xA5, 0x65, 0x0F, 0x0B, 0xD4, 0x14, 0xCF, 0x77);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudio, 0xE89BD25E, 0xFD04, 0x4FBE, 0xA1, 0x24, 0xCC, 0xAF, 0x5A, 0xDB, 0xE5, 0xB2);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherLockCallback, 0x56663D7A, 0x85A8, 0x4DA0, 0x9B, 0x13, 0x2A, 0x52, 0xD3, 0xC7, 0x74, 0x0C);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherStillsCallback, 0x7AF82DC6, 0x9A43, 0x4CD2, 0x97, 0x12, 0x58, 0x5E, 0x6B, 0xA1, 0x59, 0xBA);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherStills, 0x235C654C, 0x7389, 0x4D3E, 0xAB, 0x46, 0xD0, 0x07, 0x8D, 0x06, 0x59, 0x40);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherClipCallback, 0x407117B4, 0xB6A8, 0x46D2, 0x99, 0x11, 0x43, 0x25, 0x41, 0x71, 0xB1, 0xB7);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherClip, 0x94AAF18A, 0x7AF4, 0x4721, 0x8C, 0x1E, 0x18, 0x43, 0xD4, 0x26, 0x44, 0xE7);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMediaPoolCallback, 0xB8617A16, 0x1B17, 0x4FD6, 0x93, 0xBF, 0x66, 0x4F, 0xA7, 0x1F, 0x2A, 0x50);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMediaPool, 0x59A3056E, 0x7B62, 0x46F0, 0x8B, 0x78, 0x1F, 0xB1, 0x49, 0xF7, 0x37, 0x2C);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherCameraControlParameterIterator, 0x6B6E289F, 0x0847, 0x480A, 0xA0, 0xBD, 0xE8, 0xFB, 0x78, 0xA5, 0x50, 0x5A);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherCameraControlCallback, 0x90337CAC, 0x9376, 0x4A62, 0xA5, 0x8F, 0x10, 0x93, 0x61, 0x30, 0x97, 0x0B);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherCameraControl, 0x889111CC, 0x02CA, 0x4268, 0xAD, 0xD1, 0x56, 0x91, 0x66, 0xF0, 0xF0, 0xD9);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMacro, 0x2F1DF648, 0xCB02, 0x48D5, 0xB5, 0xEB, 0xB8, 0x57, 0xBB, 0xD6, 0x26, 0xA7);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransferMacro, 0x9BAD28DB, 0xF0CC, 0x4696, 0x82, 0xEE, 0xB1, 0xE3, 0xE5, 0xA7, 0xC1, 0x29);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMacroPoolCallback, 0xE29294A0, 0xFB4C, 0x418D, 0x9A, 0xE1, 0xC6, 0xCB, 0xA2, 0x88, 0x10, 0x4F);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMacroPool, 0x5FA28BFC, 0x7934, 0x42F4, 0xBE, 0xD8, 0x87, 0x44, 0xD6, 0x2D, 0x21, 0x0F);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMacroControlCallback, 0xF6A62317, 0x60F6, 0x4D5C, 0xA5, 0xDD, 0x2D, 0xC3, 0x72, 0xB9, 0xF4, 0xFF);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMacroControl, 0x2E23E657, 0xA7F0, 0x4C4A, 0xBC, 0xBE, 0x4B, 0x8D, 0x3D, 0xD0, 0x61, 0xAC);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherSerialPortCallback, 0x9CEBFC3C, 0x77DF, 0x45AC, 0xA1, 0xB2, 0xA9, 0xA6, 0xDF, 0x6A, 0xCE, 0x42);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherSerialPort, 0x14BEA77D, 0x3F69, 0x4FBF, 0xA3, 0x31, 0xF5, 0xEA, 0x9F, 0xF6, 0xA4, 0x2E);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherHyperDeckClipCallback, 0x473830E4, 0x53D9, 0x4924, 0x9D, 0xC1, 0x0F, 0xC0, 0x23, 0x9E, 0xDB, 0xE9);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherHyperDeckClip, 0xDFBE7482, 0xB24A, 0x4BF1, 0x92, 0xAD, 0x7E, 0xAF, 0x1F, 0x5F, 0x2A, 0xE8);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherHyperDeckClipIterator, 0x162A6BFE, 0x8290, 0x4EAC, 0x95, 0xE4, 0xBA, 0x10, 0x9D, 0x7B, 0xA4, 0xEC);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherHyperDeckCallback, 0xF745EBDF, 0xF868, 0x4787, 0xB2, 0xD4, 0x50, 0x06, 0x4A, 0x5D, 0x65, 0x97);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherHyperDeck, 0x6BB0F7E1, 0x2013, 0x4C8F, 0xA4, 0xC0, 0x10, 0x16, 0xB0, 0xC3, 0x7D, 0x14);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMixMinusOutput, 0xE787458F, 0xFCF4, 0x4A9B, 0x83, 0xD9, 0xE2, 0x51, 0x88, 0x17, 0x07, 0x42);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMixMinusOutputCallback, 0xD1D2EDF8, 0xD949, 0x49D0, 0x85, 0x01, 0xF0, 0x01, 0xD6, 0x9A, 0xB4, 0x4F);


	MIDL_DEFINE_GUID(CLSID, CLSID_CBMDSwitcherDiscovery, 0xBA726CE9, 0xB8F5, 0x4B1B, 0xAA, 0x00, 0x1A, 0x2D, 0xF3, 0x99, 0x8B, 0x45);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyFlyParameters_v3_5, 0xC522E970, 0xDDB1, 0x4027, 0xB4, 0x92, 0xF5, 0x2C, 0x1D, 0xFA, 0x5D, 0x09);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcher_v4_0, 0x1E8701D0, 0x258F, 0x43ED, 0x9E, 0xDC, 0x43, 0x4F, 0xD1, 0x6E, 0x92, 0x2D);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherDiscovery_v4_0, 0xA676047A, 0xD3A4, 0x44B1, 0xB8, 0xB5, 0x31, 0xD7, 0x28, 0x9D, 0x26, 0x6A);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherCallback_v4_0, 0x6C6E4441, 0x9421, 0x4729, 0x99, 0x51, 0x98, 0x86, 0x59, 0xE3, 0xA4, 0x4A);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherStills_v4_0, 0xAA26D656, 0x2400, 0x407B, 0x8D, 0x3C, 0x79, 0x6B, 0x50, 0x6F, 0x99, 0xDB);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherClip_v4_0, 0x3CC10CA1, 0x3E13, 0x4C69, 0x9F, 0xFC, 0xA3, 0x7A, 0x62, 0xB0, 0x58, 0x69);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMediaPool_v4_0, 0xD9B2A1E7, 0x023E, 0x42EC, 0x96, 0xC9, 0x5F, 0xFE, 0x28, 0xCE, 0x83, 0x99);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioInput_v4_0, 0x87B99021, 0xFA29, 0x4720, 0x95, 0x26, 0x45, 0x12, 0xCA, 0x55, 0x38, 0x58);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioInputIterator_v4_0, 0x0194C65A, 0x3EDA, 0x4853, 0xA6, 0xD3, 0xD5, 0x9C, 0xD1, 0x2B, 0x3C, 0x0A);


	MIDL_DEFINE_GUID(CLSID, CLSID_CBMDSwitcherDiscovery_v4_0, 0xF2DC5149, 0x9599, 0x47E4, 0x84, 0xB9, 0x05, 0x4C, 0x78, 0xA1, 0xA4, 0x6D);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionDVEParameters_v4_1_3, 0x31CA3097, 0xD178, 0x4398, 0xB0, 0x41, 0x05, 0x9C, 0x13, 0x12, 0xF1, 0x29);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKey_v4_1_3, 0x918E234D, 0x67C1, 0x452F, 0x80, 0xA0, 0xDB, 0x39, 0xFE, 0x6B, 0xCB, 0x21);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyIterator_v4_1_3, 0xEFD545AE, 0x2879, 0x412B, 0x84, 0xB7, 0x17, 0xA0, 0x4E, 0x47, 0x07, 0xED);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInputSuperSource_v4_1_3, 0x327DBE95, 0xF003, 0x409E, 0x8F, 0xEB, 0xD9, 0xC6, 0x24, 0xC4, 0x39, 0xBC);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherDownstreamKey_v4_1_3, 0x6D10D51E, 0x71FA, 0x4031, 0xBC, 0x13, 0x95, 0xBE, 0x36, 0x53, 0xD0, 0xE6);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherDownstreamKeyIterator_v4_1_3, 0xFD063042, 0xB7FD, 0x4819, 0xBD, 0x1E, 0x80, 0x9D, 0xC3, 0x80, 0xDF, 0xE9);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioMixer_v6_0, 0x58739C15, 0x063E, 0x4FC1, 0xB5, 0x9B, 0xCC, 0x3D, 0x9A, 0x01, 0x2D, 0x99);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherCallback_v6_4_1, 0x6122F290, 0x8003, 0x4CDB, 0x94, 0x93, 0x54, 0xBD, 0x3F, 0xBC, 0xD3, 0xA1);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcher_v6_4_1, 0x13772940, 0x59AE, 0x4F4A, 0xA4, 0xE4, 0x0B, 0xD1, 0x2F, 0x56, 0xC7, 0x91);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherDiscovery_v6_4_1, 0x0283B116, 0x8CE0, 0x4F86, 0xA1, 0xFD, 0xD2, 0x5E, 0xAD, 0x2F, 0x1A, 0x00);


	MIDL_DEFINE_GUID(CLSID, CLSID_CBMDSwitcherDiscovery_v6_4_1, 0xC9F0A63F, 0x69C5, 0x40FD, 0x84, 0xF6, 0xA8, 0x63, 0x2B, 0x0D, 0x65, 0xD6);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInputCallback_v6_5_1, 0x8E583D89, 0x0BAF, 0x4447, 0xAB, 0x8C, 0x6A, 0x12, 0xCD, 0x87, 0x24, 0xCB);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInput_v6_5_1, 0x66F3D466, 0x8C8C, 0x4DB4, 0xB3, 0x13, 0x8D, 0xD2, 0xEC, 0x66, 0x5D, 0xBB);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInputIterator_v6_5_1, 0x92AB7A73, 0xC6F6, 0x47FC, 0x92, 0xA7, 0xC8, 0xEE, 0xAD, 0xC9, 0xEA, 0xAC);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyFlyKeyFrameParameters_v6_7, 0xA6B8530A, 0xB0C3, 0x4304, 0x81, 0x72, 0x6D, 0x5E, 0xD9, 0x39, 0x89, 0xB1);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyFlyParameters_v6_7, 0xBB1D2964, 0xF55B, 0x491E, 0x9C, 0x5D, 0x8E, 0x43, 0x30, 0x4C, 0x34, 0xFD);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTransitionDVEParameters_v6_7, 0xCAA10B02, 0xF7CB, 0x47A6, 0x97, 0xDA, 0xC7, 0x1D, 0xEF, 0x17, 0x27, 0x12);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcher_v6_7, 0x38A89278, 0xD0EF, 0x499A, 0xA7, 0x3F, 0x46, 0x4C, 0x8F, 0x9C, 0x86, 0x6E);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherDiscovery_v6_7, 0xEB3FEF99, 0x8561, 0x4836, 0x97, 0xB7, 0xE5, 0xC7, 0x68, 0x88, 0x0D, 0x2A);


	MIDL_DEFINE_GUID(CLSID, CLSID_CBMDSwitcherDiscovery_v6_7, 0x49895038, 0xFB6D, 0x4AF7, 0xA6, 0x37, 0x7A, 0x92, 0xF0, 0x9F, 0x86, 0x55);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMultiView_v6_8, 0x231AA55F, 0xEC1D, 0x4FFF, 0xAC, 0xE7, 0x38, 0x06, 0xBA, 0x78, 0x94, 0xBB);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherMultiViewIterator_v6_8, 0x51FED981, 0xC2AD, 0x45A2, 0x86, 0x18, 0x61, 0x42, 0x9C, 0xEE, 0xD4, 0x8D);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInput_v6_8, 0x875D3396, 0x6C8A, 0x4FD8, 0x93, 0xB7, 0xD1, 0xCB, 0x65, 0x5F, 0x2A, 0xF2);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherInputIterator_v6_8, 0xF841D36E, 0x2762, 0x4215, 0xA5, 0x98, 0xFF, 0xE7, 0x6D, 0x0F, 0xF0, 0x5C);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyFlyKeyFrameParameters_v6_9, 0x8F3A7FA5, 0x6B08, 0x4999, 0xB4, 0x46, 0xB6, 0x4E, 0x9C, 0xFA, 0x3E, 0x37);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherKeyFlyParameters_v6_9, 0x4CA84EC1, 0x5A83, 0x4A9D, 0xA3, 0x7A, 0x72, 0xD3, 0x2C, 0xDF, 0x12, 0x01);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTalkbackCallback_v6_9, 0x0B90E45D, 0xE976, 0x45E1, 0xA8, 0xA2, 0x0E, 0xD4, 0xEF, 0x10, 0x2E, 0x46);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherTalkback_v6_9, 0x43E40D41, 0xADDC, 0x43D2, 0x87, 0x1F, 0x7B, 0xDB, 0x32, 0x2E, 0x9B, 0xAA);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherCameraControl_v7_0_3, 0x95D7C0B6, 0x9A84, 0x4715, 0xBE, 0x27, 0x8A, 0x9C, 0xCA, 0xA9, 0xE6, 0xA9);


	MIDL_DEFINE_GUID(IID, IID_IBMDSwitcherAudioMixer_v7_1_2, 0xCD3AD708, 0x6F82, 0x41EB, 0xB8, 0xB2, 0x64, 0x60, 0x5D, 0x40, 0x40, 0xF2);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif

#include <list>
#include "ofxAtem2.h"

// Callback class for monitoring property changes on a mix effect block.
class MixEffectBlockMonitor : public IBMDSwitcherMixEffectBlockCallback
{
public:
	MixEffectBlockMonitor() : mRefCount(1) { }

protected:
	virtual ~MixEffectBlockMonitor() { }

public:
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;

		if (IsEqualGUID(iid, IID_IBMDSwitcherMixEffectBlockCallback))
		{
			*ppv = static_cast<IBMDSwitcherMixEffectBlockCallback*>(this);
			AddRef();
			return S_OK;
		}

		if (IsEqualGUID(iid, IID_IUnknown))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}

		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return InterlockedIncrement(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = InterlockedDecrement(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}

	HRESULT STDMETHODCALLTYPE PropertyChanged(BMDSwitcherMixEffectBlockPropertyId propertyId)
	{
		return S_OK;
	}

private:
	LONG		mRefCount;
};

// Monitor the properties on Switcher Inputs.
// In this sample app we're only interested in changes to the Long Name property to update the PopupButton list
class InputMonitor : public IBMDSwitcherInputCallback
{
public:
	InputMonitor(IBMDSwitcherInput* input) : mInput(input), mRefCount(1)
	{
		mInput->AddRef();
		mInput->AddCallback(this);
	}

protected:
	~InputMonitor()
	{
		mInput->RemoveCallback(this);
		mInput->Release();
	}

public:
	// IBMDSwitcherInputCallback interface
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;

		if (IsEqualGUID(iid, IID_IBMDSwitcherInputCallback))
		{
			*ppv = static_cast<IBMDSwitcherInputCallback*>(this);
			AddRef();
			return S_OK;
		}

		if (IsEqualGUID(iid, IID_IUnknown))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}

		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return InterlockedIncrement(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = InterlockedDecrement(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}

	HRESULT STDMETHODCALLTYPE Notify(BMDSwitcherInputEventType eventType)
	{
		return S_OK;
	}
	IBMDSwitcherInput* input() { return mInput; }

private:
	IBMDSwitcherInput*		mInput;
	LONG					mRefCount;
};

// Callback class to monitor switcher disconnection
class SwitcherMonitor : public IBMDSwitcherCallback
{
public:
	SwitcherMonitor(ofxAtem2::Controller* p) : mRefCount(1), parent(p) { }

protected:
	ofxAtem2::Controller* parent = nullptr;
	virtual ~SwitcherMonitor() { }

public:
	// IBMDSwitcherCallback interface
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;

		if (IsEqualGUID(iid, IID_IBMDSwitcherCallback))
		{
			*ppv = static_cast<IBMDSwitcherCallback*>(this);
			AddRef();
			return S_OK;
		}

		if (IsEqualGUID(iid, IID_IUnknown))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}

		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return InterlockedIncrement(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = InterlockedDecrement(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}

	// Switcher event callback
	HRESULT STDMETHODCALLTYPE	Notify(BMDSwitcherEventType eventType, BMDSwitcherVideoMode coreVideoMode)
	{
		if (eventType == bmdSwitcherEventTypeDisconnected)
		{
			ofLogError() << "Switcher Disconnected";
			parent->connectionStatus = 0;
			if (parent->isAutoReconnect()) {
				parent->reconnect();
			}
		}

		return S_OK;
	}

private:
	LONG	mRefCount;
};


namespace ofxAtem2
{
	static std::string toString(BSTR& input) {
		auto longVersion = std::wstring(input);
		return std::string(longVersion.begin(), longVersion.end());
	}

	static BSTR toBSTR(const std::string& str)
	{
		int wslen = ::MultiByteToWideChar(CP_ACP, 0 /* no flags */,
			str.data(), str.length(),
			NULL, 0);

		BSTR wsdata = ::SysAllocStringLen(NULL, wslen);
		::MultiByteToWideChar(CP_ACP, 0 /* no flags */,
			str.data(), str.length(),
			wsdata, wslen);
		return wsdata;
	}

	bool Controller::connect(string ip, int mix_effect_block_index)
	{
		disconnect();
		this->ip_ = ip;
		BMDSwitcherConnectToFailure			failReason;
		BSTR ipstr = toBSTR(ip);
		HRESULT hr = mSwitcherDiscovery->ConnectTo(ipstr, &mSwitcher, &failReason);
		SysFreeString(ipstr);
		if (SUCCEEDED(hr))
		{
			connectionStatus = 1;
			HRESULT result;
			IBMDSwitcherMixEffectBlockIterator* iterator = NULL;
			IBMDSwitcherInputIterator* inputIterator = NULL;

			BSTR productName;
			if (FAILED(mSwitcher->GetProductName(&productName)))
			{
				ofLogError() << "Could not get switcher product name";
				return false;
			}
			this->product_name = toString(productName);

			mSwitcher->AddCallback(mSwitcherMonitor);

			// Create an InputMonitor for each input so we can catch any changes to input names
			result = mSwitcher->CreateIterator(IID_IBMDSwitcherInputIterator, (void**)&inputIterator);
			if (SUCCEEDED(result))
			{
				IBMDSwitcherInput* input = NULL;
				BMDSwitcherInputId id;
				// For every input, install a callback to monitor property changes on the input
				while (S_OK == inputIterator->Next(&input))
				{
					InputMonitor* inputMonitor = new InputMonitor(input);
					IBMDSwitcherInputAux* auxObj;
					result = input->QueryInterface(IID_IBMDSwitcherInputAux, (void**)&auxObj);
					input->GetInputId(&id);
					if (SUCCEEDED(result))
					{
						BMDSwitcherInputId auxId;
						result = auxObj->GetInputSource(&auxId);
						mSwitcherInputAuxList.push_back(auxObj);
					}
					input->Release();
					mInputMonitors.push_back(inputMonitor);
				}
				inputIterator->Release();
				inputIterator = NULL;
			}

			// Get the mix effect block iterator
			result = mSwitcher->CreateIterator(IID_IBMDSwitcherMixEffectBlockIterator, (void**)&iterator);
			if (FAILED(result))
			{
				ofLogError() << "Could not create IBMDSwitcherMixEffectBlockIterator iterator";
				if (iterator)
					iterator->Release();
				return false;
			}

			// Use the specified Mix Effect Block
			int cnt = 0;
			while (cnt <= mix_effect_block_index) {
				if (S_OK != iterator->Next(&mMixEffectBlock))
				{
					ofLogError() << "Could not get the first IBMDSwitcherMixEffectBlock";
					if (iterator)
						iterator->Release();
					return false;
				}
				cnt++;
			}

			mMixEffectBlock->AddCallback(mMixEffectBlockMonitor);
			//
			return true;
		}
		else
		{
			switch (failReason)
			{
			case bmdSwitcherConnectToFailureNoResponse:
				ofLogError() << "No response from Switcher";
				break;
			case bmdSwitcherConnectToFailureIncompatibleFirmware:
				ofLogError() << "Switcher has incompatible firmware";
				break;
			default:
				ofLogError() << "Connection failed for unknown reason";
				break;
			}
		}

		return false;
	}
	void Controller::reconnect()
	{
		connect(ip_);
		b_reconnect = connectionStatus == 0;
	}

	void Controller::disconnect()
	{
		// cleanup resources created when switcher was connected
		for (auto& t : mInputMonitors)
		{
			t->Release();
		}
		mInputMonitors.clear();

		if (mMixEffectBlock)
		{
			mMixEffectBlock->RemoveCallback(mMixEffectBlockMonitor);
			mMixEffectBlock->Release();
			mMixEffectBlock = NULL;
		}

		if (mSwitcher)
		{
			mSwitcher->RemoveCallback(mSwitcherMonitor);
			mSwitcher->Release();
			mSwitcher = NULL;
		}
	}
	
	int Controller::getAux(int index)
	{
		if (index >= 0 && index < auxoutputs.size()) {
			return auxoutputs[index];
		}
		return 0;
	}

	void Controller::setAux(int index, int id)
	{
		if (index >= 0 && index < auxoutputs.size()) {
			mSwitcherInputAuxList[index]->SetInputSource(id);
		}
	}

	void Controller::init()
	{
		mSwitcherDiscovery = NULL;
		mMixEffectBlock = NULL;
		mSwitcher = NULL;
		program = -1;
		preview = -1;
		connectionStatus = 0;

		mSwitcherMonitor = new SwitcherMonitor(this);
		mMixEffectBlockMonitor = new MixEffectBlockMonitor();
		mSwitcherDiscovery = NULL;
		auto result = CoInitialize(NULL);
		if (FAILED(result)) {
			throw(std::exception("ofxAtem2 failed to initialise COM. Now quitting."));
		}
		HRESULT hr = CoCreateInstance(CLSID_CBMDSwitcherDiscovery, NULL, CLSCTX_ALL, IID_IBMDSwitcherDiscovery, (void**)&mSwitcherDiscovery);
		if (FAILED(hr))
		{
			ofLogError() << "Could not create Switcher Discovery Instance.\nATEM Switcher Software may not be installed.";
		}
	}

	void Controller::update()
	{
		if (b_reconnect && b_autoreconnect) {
			reconnect();
		}
		if (mMixEffectBlock) {
			mMixEffectBlock->GetInt(bmdSwitcherMixEffectBlockPropertyIdProgramInput, &program);
			mMixEffectBlock->GetInt(bmdSwitcherMixEffectBlockPropertyIdPreviewInput, &preview);
		}
		auxoutputs.resize(mSwitcherInputAuxList.size());
		int idx = 0;
		for (auto & s : mSwitcherInputAuxList) {
			s->GetInputSource(&auxoutputs[idx++]);
		}
	}

	void Controller::performCut()
	{
		if (mMixEffectBlock) {
			mMixEffectBlock->PerformCut();
		}
	}

	void Controller::performAuto()
	{
		if (mMixEffectBlock) {
			mMixEffectBlock->PerformAutoTransition();
		}
	}

	void Controller::setProgramId(int id)
	{
		if (mMixEffectBlock) {
			mMixEffectBlock->SetInt(bmdSwitcherMixEffectBlockPropertyIdProgramInput, id);
		}
	}

	void Controller::setPreviewId(int id)
	{
		if (mMixEffectBlock) {
			mMixEffectBlock->SetInt(bmdSwitcherMixEffectBlockPropertyIdPreviewInput, id);
		}
	}

	void Controller::setAutoRate(uint32_t frames)
	{
		if (mMixEffectBlock) {
			HRESULT result;
			IBMDSwitcherTransitionMixParameters* mTransitionMixParameters = NULL;
			result = mMixEffectBlock->QueryInterface(IID_IBMDSwitcherTransitionMixParameters, (void**)&mTransitionMixParameters);
			if (SUCCEEDED(result))
			{
				mTransitionMixParameters->SetRate(frames);
			}
		}
	}

	void Controller::setTransitionPosition(float pos)
	{
		if (mMixEffectBlock) {
			HRESULT result;
			IBMDSwitcherTransitionMixParameters* mTransitionMixParameters = NULL;
			result = mMixEffectBlock->SetFloat(bmdSwitcherMixEffectBlockPropertyIdTransitionPosition, pos);
		}
	}

	bool Controller::isInTransition() const
	{
		bool inTransition;
		mMixEffectBlock->GetFlag(bmdSwitcherMixEffectBlockPropertyIdInTransition, (BOOL*)&inTransition);
		return inTransition;
	}
}